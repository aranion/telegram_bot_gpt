import asyncio
import datetime
import json
import math
import os
import sys
import logging

from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.methods import SendMessage
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
from db import create_models, check_connect_db, SessionLocal
from inline_kbs import get_home_kb, get_user_answer_test_kb, get_error_message_test_kb
from models.test import TestModel
from models.user import UserModel
from models.message import MessageModel
from sqlalchemy import desc
from search import process_search_openai
from util import get_gpt_response, add_secs_to_datetime

dp = Dispatcher()
bot = None
cash = {
    "last_message_date": {}
}
answer_bot = {
    'not_auth': '–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!',
    'error': '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...',
}

load_dotenv()

MODEL = 'gpt-4o-mini-2024-07-18'
API_TOKEN = os.getenv("API_TOKEN")
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
GOOGLE_SEARCH_ENGINE_ID = os.getenv("GOOGLE_SEARCH_ENGINE_ID")


@dp.callback_query(F.data.startswith('answer_'))
async def handler_answer_kb(call: CallbackQuery):
    await call.answer()

    try:
        temp, answer, test_id = call.data.split('_')

        await call.message.edit_reply_markup(reply_markup=None)

        session = SessionLocal()
        test = session.query(TestModel).filter_by(id=test_id).first()
        user = session.query(UserModel).filter_by(user_id=call.from_user.id).first()
        is_correct = test.correct_answer.lower() == answer.lower()

        if is_correct:
            markup = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–û–∫", callback_data='get_test')]])

            await call.message.answer('–í–µ—Ä–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∏–º?', reply_markup=markup)

            user.test_success += 1
        else:
            answer = json.loads(test.answer)
            correct_answer = test.correct_answer.lower()

            await call.message.answer(f'–û—à–∏–±–∫–∞! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:\n{correct_answer}) {answer[correct_answer]}',
                                      reply_markup=get_error_message_test_kb())
            user.test_failure += 1

        session.commit()
    except Exception as ex:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ—Å—Ç–∞! {ex}')

        await call.message.answer(answer_bot['error'])


@dp.callback_query(F.data == 'error_message_test')
async def error_message_test(call: CallbackQuery):
    await call.answer('–ë–æ—Ç –±—É–¥–µ—Ç –Ω–∞–∫–∞–∑–∞–Ω...')


@dp.callback_query(F.data == 'get_test')
async def get_test(call: CallbackQuery):
    await call.answer()

    user_id = call.from_user.id
    session = SessionLocal()
    exist_user = session.query(UserModel).filter_by(user_id=user_id).first()

    if exist_user:
        context_test = json.loads(exist_user.context_test)
        test_success = exist_user.test_success
        current_token_usage = exist_user.token_usage
        token_capacity = exist_user.token_capacity
        level = math.ceil(test_success / 5) if test_success else 1

        await call.message.answer(f'üèÜ –¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å: {level}')

        if current_token_usage > token_capacity:
            logging.info(f'–ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ç–æ–∫–µ–Ω—ã! –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {current_token_usage}, —Ä–∞–∑—Ä–µ—à–µ–Ω–æ {token_capacity}')

            return call.message.answer(f'–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ç–æ–∫–µ–Ω—ã! –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /tokens')
        if not context_test:
            content = 'You are a professional, a Russian-speaking test writer for testing your knowledge of the Python language. ' \
                      'You need to come up with a one test with the following structure:' \
                      '{"question": "Test question", "answer": { "a": "answer 1", "b": "answer 2", "c": "answer 3", "d": "answer 4"}, "correct_answer": "one of the above answers is correct"}'

            context_test.append({"role": "system", "content": content})
            context_test.append({"role": 'system', "content": 'Tests should not be repeated'})
        if exist_user.token_usage == 0:
            exist_user.token_usage = exist_user.token_usage + len(
                ''.join([item.get('content') for item in context_test]))

        gpt_answer = get_gpt_response(messages=context_test)

        if not gpt_answer['success']:
            return call.message.answer(answer_bot['error'])

        assistant_message = gpt_answer['msg']
        assistant_message = assistant_message.strip('`')

        try:
            context_test.append({"role": 'assistant', "content": assistant_message})

            test_dict = json.loads(assistant_message)
            new_test = TestModel(user_id=user_id,
                                 question=json.dumps(test_dict.get('question')),
                                 answer=json.dumps(test_dict.get('answer')),
                                 correct_answer=test_dict.get('correct_answer'))

            exist_user.context_test = json.dumps(context_test)
            exist_user.token_usage = exist_user.token_usage + len(assistant_message)
            session.add(new_test)
            session.commit()

            await call.message.answer(f'–í–æ–ø—Ä–æ—Å:\n{test_dict.get("question")}',
                                      reply_markup=get_user_answer_test_kb(test_id=new_test.id,
                                                                           list_answer=test_dict.get('answer')))
        except Exception as ex:
            logging.error(f'–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ {ex}')

            return call.message.answer(answer_bot['error'])


@dp.callback_query(F.data == 'get_user_info')
async def get_user_info(call: CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    session = SessionLocal()
    exist_user = session.query(UserModel).filter_by(user_id=user_id).first()

    if exist_user:
        username = exist_user.username
        test_success = exist_user.test_success
        test_failure = exist_user.test_failure
        question_count = session.query(MessageModel).filter_by(user_id=user_id).count()
        level = math.ceil(test_success / 5) if test_success else 1

        formatted_message = (
            f"üòé <b>–ò–º—è:</b> {username}\n"
            f"üß† <b>–í—Å–µ–≥–æ –ø—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤:</b> {test_success + test_failure}\n"
            f"‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:</b> {test_success}\n"
            f"‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:</b> {test_failure}\n"
            f"üî∏ <b>–í–µ—Ä–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:</b> {round(100 * test_success / (test_failure + test_success)) if test_failure else 100}%\n"
            f"üèÜ <b>–£—Ä–æ–≤–µ–Ω—å:</b> {level}\n"
            f"‚ùî <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤:</b> {question_count}\n"
        )

        await call.message.answer(formatted_message)

        top_user = session.query(UserModel).order_by(desc('test_success')).limit(3)
        list_top_user = []

        for item in top_user:
            list_top_user.append(f'{len(list_top_user) + 1}. {item.username}\n')

        await call.message.answer(f'‚≠ê –¢–æ–ø 3:\n{"".join(list_top_user)}')
    else:
        logging.debug(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!')

        await call.answer(answer_bot['not_auth'])


@dp.message(CommandStart())
async def start(message: Message) -> None:
    """
    –ú–µ—Ç–æ–¥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –±–æ—Ç–µ
    :param message: asyncio Message
    :return: None
    """
    user = message.from_user
    user_id = user.id
    username = user.username
    session = SessionLocal()

    logging.info(f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –±–æ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}')
    logging.debug(f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ: {message}')

    try:
        exist_user = session.query(UserModel).filter_by(user_id=user_id).first()

        if exist_user:
            logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!')

            await message.answer(f'–ò —Å–Ω–æ–≤–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π, {exist_user.username}!')
        else:
            logging.info(f'–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –ë–î')

            new_user = UserModel(user_id=user_id, username=username, chat_id=message.chat.id)
            session.add(new_user)
            session.commit()

            await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {username}!')
        await message.answer(
            '–¢–µ–±—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≥—É—Ä—É Python.\n'
            '–ó–∞–¥–∞–π –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å.\n'
            '–ü—Ä–æ–∫–∞—á–∞–π –∑–Ω–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é —Ç–µ—Å—Ç–æ–≤.\n'
            '–°–æ—Ä–µ–≤–Ω—É–π—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –ø–æ–ø–∞–¥–∏ –≤ —Ç–æ–ø-3.',
            reply_markup=get_home_kb())
    except Exception as ex:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {ex}')

        await message.answer(answer_bot['error'])
    finally:
        session.close()


@dp.message(Command('tokens'))
async def get_tokens(message: Message) -> None | SendMessage:
    """
    –°–±—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param message: asyncio Message
    :return: None
    """
    user_id = message.from_user.id
    session = SessionLocal()

    logging.info(f'–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}')

    try:
        user = session.query(UserModel).filter_by(user_id=user_id).first()

        logging.debug(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î {user}')

        if user:
            last_clear_token_date = user.last_clear_token_date
            current_time = datetime.datetime.now()

            if last_clear_token_date:
                finish_time = add_secs_to_datetime(last_clear_token_date, 180)

                if current_time <= finish_time:
                    delta = finish_time - current_time

                    return message.answer(
                        f'–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ '
                        f'{int(-1 * delta.seconds / 60 // 1 * -1)} –º–∏–Ω—É—Ç–∫–∏!')

            user.token_capacity += 500
            user.last_clear_token_date = current_time
            session.commit()

            await message.answer(f'–¢–∞–∫-—Ç–æ –ª—É—á—à–µ. –¢–µ–ø–µ—Ä—å –º—ã –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–∞—Ç—å—Å—è!')
        else:
            logging.debug(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!')

            await message.answer(answer_bot['not_auth'])
    except Exception as ex:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Ç–æ–∫–µ–Ω–æ–≤ {ex}')

        await message.answer(answer_bot['error'])
    finally:
        session.close()


@dp.message(Command('info'))
async def info(message: Message) -> None:
    """
    –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ –±–æ—Ç
    :param message: asyncio Message
    :return: None
    """
    user_id = message.from_user.id
    session = SessionLocal()

    try:
        user = session.query(UserModel).filter_by(user_id=user_id).first()

        if user:
            await message.answer(
                f'<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:</b>\n'
                f'- –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –æ Python\n'
                f'- –ü–æ–ª—É—á–∞–π –Ω–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è\n'
                f'- –ü—Ä–æ—Ö–æ–¥–∏ —Ç–µ—Å—Ç—ã\n'
                f'- –ü–æ–≤—ã—à–∞–π —Ä–µ–π—Ç–∏–Ω–≥\n'
                f'- –û—Ç—Å–ª–µ–∂–∏–≤–∞–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n',
                reply_markup=get_home_kb())
        else:
            logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!')

            await message.answer(answer_bot['not_auth'])
    except Exception as ex:
        logging.error(f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ {user_id}: {ex}')

        await message.answer(answer_bot['error'])
    finally:
        session.close()


@dp.message(Command('clean'))
async def clean_context(message: Message) -> None:
    """
    –°–±—Ä–æ—Å–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    :param message: asyncio Message
    :return: None
    """
    user_id = message.from_user.id
    session = SessionLocal()

    logging.info(f'–°–±—Ä–æ—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}')

    try:
        user = session.query(UserModel).filter_by(user_id=user_id).first()

        if user:
            user.context_length = 0
            user.context = json.dumps([])
            session.commit()

            await message.answer(f'–í—Å–µ –∑–∞–±—ã–ª, –Ω–æ –≥–æ—Ç–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ—Å–µ–¥—É!')
        else:
            logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!')

            await message.answer(answer_bot['not_auth'])
    except Exception as ex:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {ex}')

        await message.answer(answer_bot['error'])
    finally:
        session.close()


@dp.message(F.text)
async def handle_messages(message: Message) -> None | SendMessage:
    """
    –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param message: asyncio Message
    :return: None|SendMessage
    """
    text = message.text
    user_id = message.from_user.id
    session = SessionLocal()

    logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å c id {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}')

    try:
        user = session.query(UserModel).filter_by(user_id=user_id).first()

        if user:
            context = json.loads(user.context)
            current_token_usage = user.token_usage
            token_capacity = user.token_capacity
            context_length = user.context_length
            context_capacity = user.context_capacity
            token_usage = len(text) + current_token_usage
            last_message_date = cash.get('last_message_date').get(user_id)
            current_datetime = datetime.datetime.now()

            if last_message_date and current_datetime <= add_secs_to_datetime(last_message_date, 2):
                return message.answer(f'–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–æ–∑–º–æ–∂–Ω–∞ –Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 2 —Å–µ–∫!')

            cash.get('last_message_date')[user_id] = current_datetime

            await message.answer('–î—É–º–∞—é...')

            if token_usage > token_capacity:
                logging.info(f'–ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ç–æ–∫–µ–Ω—ã! –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {current_token_usage}, —Ä–∞–∑—Ä–µ—à–µ–Ω–æ {token_capacity}')

                return message.answer(f'–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ç–æ–∫–µ–Ω—ã! –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /tokens')
            if context_length >= context_capacity:
                logging.info(
                    f'–ü—Ä–µ–≤—ã—à–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É! –¢–µ–∫—É—â–∞—è –¥–ª–∏–Ω–∞: {context_length}, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: {context_capacity}')

                removed_context = []

                while context_length >= context_capacity:
                    removed_context.append(context.pop(1))
                    context_length -= 1

                logging.info(f'–£–¥–∞–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: {removed_context}')
            if len(context) == 0:
                logging.info('–ó–∞–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ prompt')

                content = 'You are a professional Russian-speaking assistant in learning programming in Python, ' \
                          'your task is to give clear, short and correct answers to the questions asked. ' \
                          'If the question is not related to the Python language, please return a polite refusal.'

                context.append({"role": "system", "content": content})

            context.append({"role": "user", "content": text})

            # search_res = process_search_openai(GOOGLE_API_KEY, GOOGLE_SEARCH_ENGINE_ID, text)
            # context.append({"role": 'system', "content": f'Here is information from the internet: {search_res}'})
            # context.append({"role": 'system', "content": 'Combine answers into one general and short one.'})

            gpt_answer = get_gpt_response(messages=context)

            if not gpt_answer['success']:
                return message.answer(answer_bot['error'])

            assistant_message = gpt_answer['msg']

            context.append({"role": 'assistant', "content": assistant_message})

            await message.answer(assistant_message, reply_markup=get_home_kb())

            new_message = MessageModel(user_id=user_id, user_message=text, assistant_message=assistant_message)

            session.add(new_message)

            user.context = json.dumps(context)
            user.token_usage = token_usage
            user.context_length = len(context)
            user.last_message_date = datetime.datetime.now()

            session.commit()
        else:
            logging.debug(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î')

            return message.answer(answer_bot['not_auth'])
    except Exception as ex:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å GPT: {ex}')

        await message.answer(answer_bot['error'])
    finally:
        session.close()


async def main() -> None:
    """
    –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    :return: None
    """
    global bot

    try:
        bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

        await dp.start_polling(bot)
    except Exception as ex:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ polling! {ex}')


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)

    check_connect_db()
    create_models()

    asyncio.run(main())
